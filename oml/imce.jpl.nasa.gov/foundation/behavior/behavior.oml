@dc:rights="""Copyright 2010-2019, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.

This software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses,a or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."""
@owl:versionInfo="""$Revision$"""
@dc:creator="""Flight Systems Engineering, Integration, & Test Section"""
@dc:date="""$Date$"""
@dc:type="""Foundation"""
@dc:title="""Behavior Ontology"""
@dc:description="""The Behavior Ontology defines concepts and properties for describing behavior. This is version 3 of the behavior ontology."""
open terminology <http://imce.jpl.nasa.gov/foundation/behavior/behavior> {

	extends <http://imce.jpl.nasa.gov/foundation/analysis/analysis>
	
	@dc:description="""TBD"""
	@rdfs:label="""Element Behavior"""
	concept ElementBehavior

	@dc:description="""TBD"""
	@rdfs:label="""Aspect"""
	aspect Aspect

	@dc:description="""A <classname>BehavingElement</classname> is an abstract classifier that specifies which system elements have some behavior characterization."""
	@rdfs:label="""Behaving Element"""
	aspect BehavingElement

	@dc:description="""A <classname>StateVariable</classname> is a variable that represents a particular quantity (as per ISO-80000) of a <classname>BeahvingElement</classname> that changes with time.
It is the Cartesian product of its <classname>TimeDomain</classname> and <classname>Codomain</classname>."""
	@rdfs:label="""State Variable"""
	concept StateVariable
	
	@dc:description="""A <classname>Parameter</classname>is a quantity of a <classname>BehavingElement</classname> that does not dynamically change in time."""
	@rdfs:label="""Parameter"""
	concept Parameter
	
	@rdfs:label="""Constraint"""
	concept Constraint
	
	@rdfs:label="""Codomain"""
	concept Codomain
	
	@rdfs:label="""Scalar Codomain"""
	concept ScalarCodomain
	
	@rdfs:label="""Compound Codomain"""
	concept CompoundCodomain
	
	@rdfs:label="""Compounded Element"""
	concept CompoundedElement
	
	@rdfs:label="""State"""
	concept State
	
	ScalarCodomain extendsConcept Codomain
	
	CompoundCodomain extendsConcept Codomain
	
	State extendsConcept CompoundedElement
	
	ElementBehavior extendsConcept analysis:Characterization
	
	StateVariable extendsConcept analysis:Characterization
	
	Parameter extendsConcept analysis:Characterization
	
	Constraint extendsConcept analysis:Characterization
	
	@dc:description="""TBD"""
	@oml:hasPropertyLabel="""constrains"""
	@oml:hasReificationLabel="""Constrains"""
	reifiedRelationship Constrains {
		unreified = constrains
		source = Constraint
		target = StateVariable }
		
	@dc:description="""TBD"""
	@oml:hasPropertyLabel="""uses"""
	@oml:hasReificationLabel="""Uses"""
	reifiedRelationship Uses {
		unreified = uses
		source = Constraint
		target = Parameter }
		
	@dc:description="""TBD"""
	@oml:hasPropertyLabel="""hasCodomain"""
	@oml:hasReificationLabel="""HasCodomain"""
	reifiedRelationship HasCodomain {
		functional
		unreified = hasCodomain
		source = StateVariable
		target = Codomain }
		
	@dc:description="""TBD"""
	@oml:hasPropertyLabel="""hasElement"""
	@oml:hasReificationLabel="""HasElement"""
	reifiedRelationship HasElement {
		unreified = hasElement
		source = CompoundCodomain
		target = CompoundedElement }

	BehavingElement extendsAspect Aspect

	mission:Environment extendsAspect BehavingElement

	mission:PerformingElement extendsAspect BehavingElement
	
	@rdfs:label="""has value"""
	entityScalarDataProperty + hasValue {
		domain Parameter
		range XMLSchema:double
	}
	
	// Uncertain about hasValue for ScalarCodomain - how can we best represent the fact that it could be a string, double, unitized value, etc?

}
