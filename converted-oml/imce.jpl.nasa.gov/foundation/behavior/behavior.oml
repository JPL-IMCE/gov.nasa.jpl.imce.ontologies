@dc:rights="""Copyright 2010-2014, by the California Institute of Technology. ALL RIGHTS RESERVED. United States Government Sponsorship acknowledged. Any commercial use must be negotiated with the Office of Technology Transfer at the California Institute of Technology.

This software may be subject to U.S. export control laws. By accepting this software, the user agrees to comply with all applicable U.S. export laws and regulations. User has the responsibility to obtain export licenses,a or other export authority as may be required before exporting such information to foreign countries or providing access to foreign persons."""
@owl:versionInfo="""$Revision$"""
@dc:creator="""Flight Systems Engineering, Integration, & Test Section"""
@dc:date="""$Date$"""
@dc:type="""Foundation"""
@dc:title="""Behavior Ontology"""
@dc:description="""The Behavior Ontology defines concepts and properties for describing behavior. The complete documentation for this ontology is hosted on the MBSE CoP website at: https://mbse.jpl.nasa.gov/confluence/display/IMCECOP/Behavior+Pattern+-+V1.0."""
open terminology <http://imce.jpl.nasa.gov/foundation/behavior/behavior> {

	extends <http://imce.jpl.nasa.gov/foundation/analysis/analysis>

	@rdfs:label="""Aspect"""
	aspect Aspect

	@dc:description="""<classname>AttributeGroup</classname> is the abstract class that generalizes <classname>PropertyGroup</classname> and <classname>InteractionTerminal</classname>."""
	@rdfs:label="""Attribute Group"""
	aspect AttributeGroup

	@dc:description="""A <classname>BehavingElement</classname> is an abstract classifier that specifies which system elements have some behavior characterization."""
	@rdfs:label="""Behaving Element"""
	aspect BehavingElement

	@rdfs:label="""Element Behavior Owner"""
	aspect ElementBehaviorOwner

	@dc:description="""An<classname>AbstractValueTypedAttribute</classname> is an abstract class that represents the behavior attributes and features that can be typed by <classname>AbstractValueType</classname> through the <property>hasValueType</property>."""
	@rdfs:label="""Abstract Value Typed Attribute"""
	concept AbstractValueTypedAttribute

	@dc:description="""<classname>Attribute</classname> is the abstract class that generalizes <classname>Property</classname> (<classname>StateVariable</classname>s and <classname>Parameter</classname>s) and <classname>PropertySurrogate</classname>(<classname>StateVariableSurrogate</classname>s and <classname>ParameterSurrogate</classname>s)."""
	@rdfs:label="""Attribute"""
	concept Attribute

	@dc:description="""An <classname>AttributeAutomatonConstraint</classname> can be used to specify the <classname>Codomain</classname> of a discrete <classname>StateVariable</classname> using <classname>AutomatonState</classname>s.
It can also represents behavior constraints that are more amenable to an automata form."""
	@rdfs:label="""Attribute Automaton"""
	concept AttributeAutomaton

	@dc:description="""<classname>AttributeConstraint</classname> is the abstract class that generalizes <classname>ElementBehaviorConstraint</classname> and <classname>InteractionBehaviorConstraint</classname>."""
	@rdfs:label="""Attribute Constraint"""
	concept AttributeConstraint

	@dc:description="""<classname>AttributeConstraintParticipant</classname> is the abstract class that generalizes <classname>StateVariableConstraintParticipant</classname> and <classname>ParameterConstraintParticipant</classname>."""
	@rdfs:label="""Attribute Constraint Participant"""
	concept AttributeConstraintParticipant

	@dc:description="""An <classname>AutomatonRegion</classname> groups <classname>AutomatonState</classname>s of an <classname>AttributeAutomatonConstraint</classname>."""
	@rdfs:label="""Automaton Region"""
	concept AutomatonRegion

	@dc:description="""An <classname>AutomatonState</classname> represents a state of a <classname>StateVariable</classname>, i.e., a possible value of the quantity of a <classname>BehavingElement</classname>, and in effect an element of the <classname>Codomain</classname> of a <classname>StateVariable</classname>."""
	@rdfs:label="""Automaton State"""
	concept AutomatonState

	@rdfs:label="""Automaton Transition"""
	concept AutomatonTransition

	@rdfs:label="""Element Behavior"""
	concept ElementBehavior

	@rdfs:label="""Element Behavior Automaton"""
	concept ElementBehaviorAutomaton

	@rdfs:label="""Element Behavior Automaton Element"""
	concept ElementBehaviorAutomatonElement

	@dc:description="""An <classname>ElementBehaviorCharacterization</classname> groups <classname>ElementBehaviorConstraint</classname>s through the <property>hasConstraint</property>. It also <property>references</property> <classname>PropertyGroup</classname>s of which the <classname>Attributes</classname>s are of interest in the scope of the <classname>ElementBehaviorConstraint</classname>s."""
	@rdfs:label="""Element Behavior Characterization"""
	concept ElementBehaviorCharacterization

	@rdfs:label="""Element Behavior Class"""
	concept ElementBehaviorClass

	@dc:description="""<classname>ElementBehaviorConstraint</classname> specifies how the dynamic state of a <classname>BehavingElement</classname> is allowed to evolve in time.
It is expressed by <property>constrain</property>ing <classname>StateVariableConstraintParticipant</classname>s and <property>us</property>ing <classname>ParameterConstraintParticipant</classname>s."""
	@rdfs:label="""Element Behavior Constraint"""
	concept ElementBehaviorConstraint

	@rdfs:label="""Element Behavior Region"""
	concept ElementBehaviorRegion

	@rdfs:label="""Element Behavior State"""
	concept ElementBehaviorState

	@rdfs:label="""Element Behavior Transition"""
	concept ElementBehaviorTransition

	@dc:description="""An <classname>Interaction</classname> is a link that <property>joins</property> <classname>InteractionTerminal</classname>s, representing the context of the interaction among the associated <classname>BehavingElement</classname>s.
An <classname>Interaction</classname> groups <classname>InteractionBehaviorConstraint</classname>s through the <property>hasConstraint</property>."""
	@rdfs:label="""Interaction"""
	concept Interaction

	@rdfs:label="""Interaction Behavior"""
	concept InteractionBehavior

	@rdfs:label="""Interaction Behavior Automaton"""
	concept InteractionBehaviorAutomaton

	@rdfs:label="""Interaction Behavior Automaton Element"""
	concept InteractionBehaviorAutomatonElement

	@rdfs:label="""Interaction Behavior Class"""
	concept InteractionBehaviorClass

	@dc:description="""<classname>InteractionBehaviorConstraint</classname> specifies how different <classname>BehavingElement</classname>s interact with one another.
It is expressed by <property>constrain</property>ing <classname>StateVariableConstraintParticipant</classname>s and <property>us</property>ing <classname>ParameterConstraintParticipant</classname>s."""
	@rdfs:label="""Interaction Behavior Constraint"""
	concept InteractionBehaviorConstraint

	@rdfs:label="""Interaction Behavior Region"""
	concept InteractionBehaviorRegion

	@rdfs:label="""Interaction Behavior State"""
	concept InteractionBehaviorState

	@rdfs:label="""Interaction Behavior Transition"""
	concept InteractionBehaviorTransition

	@rdfs:label="""Interaction Role"""
	concept InteractionRole

	@dc:description="""An <classname>InteractionTerminal</classname> is a construct that acts as a filter for selecting the <classname>StateVariable</classname>s and <classname>Parameter</classname>s of one <classname>BehavingElement</classname> involved in an interaction with other <classname>BehavingElement</classname>s."""
	@rdfs:label="""Interaction Terminal"""
	concept InteractionTerminal

	@dc:description="""A <classname>Parameter</classname>is a quantity of a <classname>BehavingElement</classname> that does not dynamically change in time."""
	@rdfs:label="""Parameter"""
	concept Parameter

	@dc:description="""A <classname>ParameterConstraintParticipant</classname> is a property <property>use</property>d by an <classname>AttributeConstraint</classname> (<classname>ElementBehaviorConstraint</classname> or <classname>InteractionBehaviorConstraint</classname>).
When <property>use</property>d by an <classname>ElementBehaviorConstraint</classname>, it <property>playsRoleOf</property> a <classname>Parameter</classname>, and when <property>use</property>d by an <classname>InteractionBehaviorConstraint</classname>, it <property>playsRoleOf</property> a <classname>ParameterSurrogate</classname>."""
	@rdfs:label="""Parameter Constraint Participant"""
	concept ParameterConstraintParticipant

	@dc:description="""A <classname>ParameterSurrogate</classname> is a property of an <classname>InteractionTerminal</classname> and <property>exposes</property> a <classname>Parameter</classname> of the <classname>PropertyGroup</classname> its <classname>InteractionTerminal</classname> <property>presents</property>."""
	@rdfs:label="""Parameter Surrogate"""
	concept ParameterSurrogate

	@dc:description="""<classname>Property</classname> is the abstract class that generalizes <classname>StateVariable</classname> and <classname>Parameter</classname>."""
	@rdfs:label="""Property"""
	concept Property

	@dc:description="""An <classname>PropertyGroup</classname> is a construct that acts as a grouping mechanism for <classname>StateVariale</classname>s or <classname>Parameter</classname>s. The meaning of the grouping is left to the modeler's intent."""
	@rdfs:label="""Property Group"""
	concept PropertyGroup

	@dc:description="""<classname>PropertySurrogate</classname> is the abstract class that generalizes <classname>StateVariableSurrogate</classname> and <classname>ParameterSurrogate</classname>."""
	@rdfs:label="""Property Surrogate"""
	concept PropertySurrogate

	@dc:description="""A <classname>StateVariable</classname> is a variable that represents a particular quantity (as per ISO-80000) of a <classname>BeahvingElement</classname> that changes with time.
It is the Cartesian product of its <classname>TimeDomain</classname> and <classname>Codomain</classname>."""
	@rdfs:label="""State Variable"""
	concept StateVariable

	@dc:description="""A <classname>StateVariableConstraintParticipant</classname> is a property <property>constrain</property>ed by an <classname>AttributeConstraint</classname> (<classname>ElementBehaviorConstraint</classname> or <classname>InteractionBehaviorConstraint</classname>).
When <property>constrain</property>ed by an <classname>ElementBehaviorConstraint</classname>, it <property>playsRoleOf</property> a <classname>StateVariable</classname>, and when <property>constrain</property>ed by an <classname>InteractionBehaviorConstraint</classname>, it <property>playsRoleOf</property> a <classname>StateVariableSurrogate</classname>."""
	@rdfs:label="""State Variable Constraint Participant"""
	concept StateVariableConstraintParticipant

	@dc:description="""A <classname>StateVariableSurrogate</classname> is a property of an <classname>InteractionTerminal</classname> and <property>exposes</property> a <classname>StateVariable</classname> of the <classname>PropertyGroup</classname> its <classname>InteractionTerminal</classname> <property>presents</property>."""
	@rdfs:label="""State Variable Surrogate"""
	concept StateVariableSurrogate

	Attribute extendsConcept AbstractValueTypedAttribute

	AttributeConstraint extendsConcept analysis:Characterization

	AttributeConstraintParticipant extendsConcept AbstractValueTypedAttribute

	ElementBehaviorAutomaton extendsConcept AttributeAutomaton

	ElementBehaviorAutomaton extendsConcept ElementBehaviorClass

	ElementBehaviorAutomatonElement extendsConcept ElementBehavior

	ElementBehaviorCharacterization extendsConcept analysis:Characterization

	ElementBehaviorClass extendsConcept ElementBehavior

	ElementBehaviorConstraint extendsConcept AttributeConstraint

	ElementBehaviorConstraint extendsConcept ElementBehaviorClass

	ElementBehaviorRegion extendsConcept AutomatonRegion

	ElementBehaviorRegion extendsConcept ElementBehaviorAutomatonElement

	ElementBehaviorState extendsConcept AutomatonState

	ElementBehaviorState extendsConcept ElementBehaviorAutomatonElement

	ElementBehaviorTransition extendsConcept AutomatonTransition

	ElementBehaviorTransition extendsConcept ElementBehaviorAutomatonElement

	InteractionBehaviorAutomaton extendsConcept AttributeAutomaton

	InteractionBehaviorAutomaton extendsConcept InteractionBehaviorClass

	InteractionBehaviorAutomatonElement extendsConcept InteractionBehavior

	InteractionBehaviorClass extendsConcept InteractionBehavior

	InteractionBehaviorConstraint extendsConcept AttributeConstraint

	InteractionBehaviorConstraint extendsConcept InteractionBehaviorClass

	InteractionBehaviorRegion extendsConcept AutomatonRegion

	InteractionBehaviorRegion extendsConcept InteractionBehaviorAutomatonElement

	InteractionBehaviorState extendsConcept AutomatonState

	InteractionBehaviorState extendsConcept InteractionBehaviorAutomatonElement

	InteractionBehaviorTransition extendsConcept AutomatonTransition

	InteractionBehaviorTransition extendsConcept InteractionBehaviorAutomatonElement

	Parameter extendsConcept Property

	ParameterConstraintParticipant extendsConcept AttributeConstraintParticipant

	ParameterSurrogate extendsConcept PropertySurrogate

	Property extendsConcept Attribute

	PropertyGroup extendsConcept analysis:Characterization

	PropertySurrogate extendsConcept Attribute

	StateVariable extendsConcept Property

	StateVariableConstraintParticipant extendsConcept AttributeConstraintParticipant

	StateVariableSurrogate extendsConcept PropertySurrogate

	@oml:hasPropertyLabel="""constrains"""
	@oml:hasReificationLabel="""Constrains"""
	reifiedRelationship Constrains {
		inverseFunctional
		unreified = constrains
		source = AttributeConstraint
		target = StateVariableConstraintParticipant }

	@dc:description="""A <classname>PropertySurrogate</classname> <replaceable>s</replaceable> <property>exposes</property> a <classname>Property</classname> <replaceable>p</replaceable> if an only if <replaceable>s</replaceable> represents <replaceable>p</replaceable> in an <classname>Interaction</classname>."""
	@oml:hasPropertyLabel="""exposes"""
	@oml:hasReificationLabel="""Exposes"""
	reifiedRelationship Exposes {
		functional
		unreified = exposes
		source = PropertySurrogate
		target = Property }

	@oml:hasPropertyLabel="""has attribute"""
	@oml:hasReificationLabel="""Has Attribute"""
	reifiedRelationship HasAttribute {
		inverseFunctional
		unreified = hasAttribute
		source = AttributeGroup
		target = Attribute }

	@oml:hasPropertyLabel="""has element behavior class"""
	@oml:hasPropertyLabel="""has Element Behavior Class"""
	@oml:hasReificationLabel="""Has Element Behavior Class"""
	reifiedRelationship HasElementBehaviorClass {
		inverseFunctional
		unreified = hasElementBehaviorClass
		source = ElementBehaviorOwner
		target = ElementBehaviorClass }

	@oml:hasPropertyLabel="""has interaction behavior class"""
	@oml:hasPropertyLabel="""has Interaction Behavior Class"""
	@oml:hasReificationLabel="""Has Interaction Behavior Class"""
	reifiedRelationship HasInteractionBehaviorClass {
		unreified = hasInteractionBehaviorClass
		source = Interaction
		target = InteractionBehaviorClass }

	@oml:hasPropertyLabel="""has region"""
	@oml:hasReificationLabel="""Has Region"""
	reifiedRelationship HasRegion {
		inverseFunctional
		unreified = hasRegion
		source = AttributeAutomaton
		target = AutomatonRegion }

	@oml:hasPropertyLabel="""has state"""
	@oml:hasReificationLabel="""Has State"""
	reifiedRelationship HasState {
		inverseFunctional
		unreified = hasState
		source = AutomatonRegion
		target = AutomatonState }

	@oml:hasPropertyLabel="""has transition"""
	@oml:hasReificationLabel="""Has Transition"""
	reifiedRelationship HasTransition {
		inverseFunctional
		unreified = hasTransition
		source = AutomatonRegion
		target = AutomatonTransition }

	@dc:description="""An <classname>AttributeConstraintParticipant</classname> <replaceable>p</replaceable> <property>playsRoleOf</property> an <classname>Attribute</classname> <replaceable>a</replaceable> if an only if it represents <replaceable>a</replaceable> in an <classname>AttributeConstraint</classname>."""
	@oml:hasPropertyLabel="""plays role of"""
	@oml:hasReificationLabel="""Plays Role Of"""
	reifiedRelationship PlaysRoleOf {
		functional
		unreified = playsRoleOf
		source = AttributeConstraintParticipant
		target = Attribute }

	@dc:description="""A <classname>PropertyGroup</classname> <replaceable>g</replaceable> <property>presents</property> an <classname>InteractionTerminal</classname> <replaceable>i</replaceable> if and only if <classname>Attribute</classname>s of <replaceable>g</replaceable> are directly influenced by <classname>Attribute</classname>s of other <classname>BehavingElement</classname>s."""
	@oml:hasPropertyLabel="""presents"""
	@oml:hasReificationLabel="""Presents"""
	reifiedRelationship Presents {
		unreified = presents
		source = PropertyGroup
		target = InteractionTerminal }

	@dc:description="""An <classname>ElementBehaviorCharacterization</classname> <replaceable>c</replaceable> <property>references</property> a <classname>PropertyGroup</classname> <replaceable>g</replaceable> if an only if <classname>ElementBehaviorConstraint</classname>s of <replaceable>c</replaceable> constrain or use <classname>Propert</classname>ies of <replaceable>g</replaceable>."""
	@oml:hasPropertyLabel="""references"""
	@oml:hasReificationLabel="""References"""
	reifiedRelationship References {
		unreified = references
		source = ElementBehaviorCharacterization
		target = PropertyGroup }

	@oml:hasPropertyLabel="""uses"""
	@oml:hasReificationLabel="""Uses"""
	reifiedRelationship Uses {
		inverseFunctional
		unreified = uses
		source = AttributeConstraint
		target = ParameterConstraintParticipant }

	AbstractValueTypedAttribute extendsAspect analysis:AnalyzedElement

	AbstractValueTypedAttribute extendsAspect analysis:CharacterizedElement

	Aspect extendsAspect AttributeGroup

	Aspect extendsAspect ElementBehaviorOwner

	AttributeAutomaton extendsAspect analysis:AnalyzedElement

	AttributeAutomaton extendsAspect analysis:CharacterizedElement

	AttributeGroup extendsAspect analysis:AnalyzedElement

	AttributeGroup extendsAspect analysis:CharacterizedElement

	AutomatonRegion extendsAspect analysis:AnalyzedElement

	AutomatonRegion extendsAspect analysis:CharacterizedElement

	AutomatonState extendsAspect analysis:AnalyzedElement

	AutomatonState extendsAspect analysis:CharacterizedElement

	AutomatonTransition extendsAspect analysis:AnalyzedElement

	AutomatonTransition extendsAspect analysis:CharacterizedElement

	BehavingElement extendsAspect Aspect

	ElementBehavior extendsAspect analysis:AnalyzedElement

	ElementBehavior extendsAspect analysis:CharacterizedElement

	ElementBehaviorCharacterization extendsAspect ElementBehaviorOwner

	ElementBehaviorOwner extendsAspect analysis:AnalyzedElement

	ElementBehaviorOwner extendsAspect analysis:CharacterizedElement

	Exposes extendsAspect analysis:AnalyzedElement

	Exposes extendsAspect analysis:CharacterizedElement

	HasElementBehaviorClass extendsAspect analysis:AnalyzedElement

	HasElementBehaviorClass extendsAspect analysis:CharacterizedElement

	HasInteractionBehaviorClass extendsAspect analysis:AnalyzedElement

	HasInteractionBehaviorClass extendsAspect analysis:CharacterizedElement

	HasRegion extendsAspect analysis:AnalyzedElement

	HasRegion extendsAspect analysis:CharacterizedElement

	HasState extendsAspect analysis:AnalyzedElement

	HasState extendsAspect analysis:CharacterizedElement

	HasTransition extendsAspect analysis:AnalyzedElement

	HasTransition extendsAspect analysis:CharacterizedElement

	Interaction extendsAspect analysis:AnalyzedElement

	Interaction extendsAspect analysis:CharacterizedElement

	InteractionBehavior extendsAspect analysis:AnalyzedElement

	InteractionBehavior extendsAspect analysis:CharacterizedElement

	InteractionRole extendsAspect analysis:AnalyzedElement

	InteractionRole extendsAspect analysis:CharacterizedElement

	InteractionTerminal extendsAspect AttributeGroup

	PlaysRoleOf extendsAspect analysis:AnalyzedElement

	PlaysRoleOf extendsAspect analysis:CharacterizedElement

	Presents extendsAspect analysis:AnalyzedElement

	Presents extendsAspect analysis:CharacterizedElement

	PropertyGroup extendsAspect AttributeGroup

	References extendsAspect analysis:AnalyzedElement

	References extendsAspect analysis:CharacterizedElement

	mission:Environment extendsAspect BehavingElement

	mission:PerformingElement extendsAspect BehavingElement

	@rdfs:label="""has Attribute Group"""
	unreifiedRelationship hasAttributeGroup {
		source = InteractionRole
		target = AttributeGroup }

	@rdfs:label="""has Element Behavior"""
	unreifiedRelationship hasElementBehavior {
		source = ElementBehaviorOwner
		target = ElementBehavior }

	@rdfs:label="""has Interaction Behavior"""
	unreifiedRelationship hasInteractionBehavior {
		source = Interaction
		target = InteractionBehavior }

	@rdfs:label="""has Interaction Role"""
	unreifiedRelationship hasInteractionRole {
		source = Interaction
		target = InteractionRole }

	@dc:description="""An <classname>Interaction</classname> <replaceable>i</replaceable> <property>joins</property> an <classname>AttributeGroup</classname> <replaceable>a</replaceable> if an only if the <classname>BehavingElement</classname>s associated with <replaceable>a</replaceable> are involved in the interaction represented by <replaceable>i</replaceable>."""
	@rdfs:label="""joins"""
	unreifiedRelationship joins {
		source = Interaction
		target = AttributeGroup }

	rule R47490 infers hasElementBehavior
	if ElementBehaviorOwner
	&& hasElementBehaviorClass
	&& AttributeAutomaton
	&& hasRegion
	&& AutomatonRegion
	&& hasTransition
	&& ElementBehaviorTransition

	rule R53015 infers hasElementBehavior
	if ElementBehaviorOwner
	&& hasElementBehaviorClass
	&& AttributeAutomaton
	&& hasRegion
	&& AutomatonRegion
	&& hasState
	&& ElementBehaviorState

	rule R64430 infers joins
	if Interaction
	&& hasInteractionRole
	&& InteractionRole
	&& hasAttributeGroup
	&& AttributeGroup

	rule R77710 infers hasInteractionBehavior
	if Interaction
	&& hasInteractionBehaviorClass
	&& AttributeAutomaton
	&& hasRegion
	&& AutomatonRegion
	&& hasTransition
	&& InteractionBehaviorTransition

	rule R81333 infers hasInteractionBehavior
	if Interaction
	&& hasInteractionBehaviorClass
	&& AttributeAutomaton
	&& hasRegion
	&& AutomatonRegion
	&& hasState
	&& InteractionBehaviorState

	rule R87893 infers hasInteractionBehavior
	if Interaction
	&& hasInteractionBehaviorClass
	&& InteractionBehaviorAutomaton
	&& hasRegion
	&& InteractionBehaviorRegion

	rule R97118 infers hasElementBehavior
	if ElementBehaviorOwner
	&& hasElementBehaviorClass
	&& ElementBehaviorAutomaton
	&& hasRegion
	&& ElementBehaviorRegion

	synonymScalarRestriction AbstractValueType {
		restrictedRange XMLSchema:string
	}

	@rdfs:label="""Attribute Automaton Configuration Value Type"""
	synonymScalarRestriction AttributeAutomatonConfigurationValueType {
		restrictedRange AbstractValueType
	}

	synonymScalarRestriction AttributeValueType {
		restrictedRange AbstractValueType
	}

	@rdfs:label="""has configuration"""
	@rdfs:label="""has Configuration"""
	entityScalarDataProperty hasConfiguration {
		domain AttributeAutomaton
		range AttributeAutomatonConfigurationValueType
	}

	@rdfs:label="""has value type"""
	entityScalarDataProperty + hasValueType {
		domain AbstractValueTypedAttribute
		range AbstractValueType
	}

	allEntities ElementBehaviorCharacterization . hasElementBehaviorClass in ElementBehaviorConstraint

	allEntities InteractionTerminal . hasAttribute in PropertySurrogate

	allEntities PropertyGroup . hasAttribute in Property

}
